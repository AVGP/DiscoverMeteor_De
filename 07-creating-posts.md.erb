---
title: Creating Posts
slug: creating-posts
date: 0007/01/01
number: 7
contents: Learn how to submit a post client-side.|Implement a simple security check.|Restrict access to the post submit form.|Learn to use a server-side Method for added security.
paragraphs: 60
---

Nun haben wir gesehen, wie einfach es ist, Beiträge über die Konsole mit dem Datenbankaufruf `Posts.insert` anzulegen. Aber wir können natürlich nicht erwarten, dass unsere Benutzer die Konsole benutzen.

Also brauchen wir ein Benutzer-Interface, um unseren Benutzern die Möglichkeit zu geben, neue Beiträge anzulegen.

### Aufbau der Seite zum Anlegen eines Beitrages

Wir fangen an, indem wir eine neue Route für unsere Seite definieren:

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "13~15" %>

Wir benutzen die Funktion `data` des Routers, um den Kontext `postPage` des Templates zu setzen. Erinnerung: Was immer wir in den Kontext legen, wird als `this` innerhalb des Template-Helpers verfügbar sein. 

### Hinzufügen eines Links zur Überschrift

Da die Route nun angelegt ist, können wir nun einen Link in der Überschrift unserer Seite hinzufügen:

~~~html
<template name="header">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
        <span class="icon-bar"></span>
      </a>
      <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
      <div class="nav-collapse collapse">
        <ul class="nav">
          <li><a href="{{pathFor 'postSubmit'}}">New</a></li>
        </ul>
        <ul class="nav pull-right">
          <li>{{loginButtons}}</li>
        </ul>
      </div>
    </div>
  </header>
</template>
~~~
<%= caption "client/views/includes/header.html" %>
<%= highlight "11~16" %>

Das Anlegen der Route bedeutet, dass wenn der Benutzer die URL `/submit` aufruft, Meteor das Template `postsubmit` anzeigen wird. Wir legen dieses Template nun an:

~~~html
<template name="postSubmit">
  <form class="main">
    <div class="control-group">
        <label class="control-label" for="url">URL</label>
        <div class="controls">
            <input name="url" type="text" value="" placeholder="Your URL"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="title">Title</label>
        <div class="controls">
            <input name="title" type="text" value="" placeholder="Name your post"/>
        </div>
    </div>

    <div class="control-group">
        <label class="control-label" for="message">Message</label>
        <div class="controls">
            <textarea name="message" type="text" value=""/>
        </div>
    </div> 

    <div class="control-group">
        <div class="controls">
            <input type="submit" value="Submit" class="btn btn-primary"/>
        </div>
    </div>
  </form>
</template>

~~~
<%= caption "client/views/posts/post_submit.html" %>

Bemerkung: Das ist eines an Markup. Das ist durch die Benutzung von Twitters Bootstrap bedingt. Während nur die Formularelemente wichtig sind, wird das restliche Markup helfen, unser App ein wenig besser aussehen zu lassen. Das gerenderte Template sollte nun wie folgt aussehen:

<%= screenshot "7-1", "Das Formular zum Anlegen von Beiträgen" %>

Das ist ein einfaches Formular. Wir brauchen uns über die Aktion des Formulars keine Gedanken zu machen. Das Submit-Event des Formulars werden wir abfangen und die Daten per Javascript aktualisieren. (Es macht auch keinen Sinn einen Fallback für nicht vorhandenes Javascript im Browser einzurichten, da eine Meteor-App nicht ohne JavaScript funktioniert.)

### Anlegen von Beiträgen

Wir verbinden nun das Formular mit einem Event-Handler. Am besten benutzen wir dafür das `submit`-Event (anstatt z.B. das click-Event des Buttons). Das hat den Vorteil, dass all möglichen Wege für das Absenden des Formulars abgedeckt werden (wie zB. das Eingeben der Return-Taste im URL-Feld).

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    post._id = Posts.insert(post);
    Router.go('postPage', post);
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>

<%= commit "7-1", "Added a submit post page and linked to it in the header." %>

Diese Funktion verwendet [jQuery](http://jquery.com), um die Werte aus den verschiedenen Formularfeldern herauszuparsen und die ein neues Postobjekt anzulegen. Wir müssen dabei beachten, dass die Methode `preventDefault()` auf dem Parameter `event` in unserem Handler aufgerufen wird. Ansonsten würde der Browser versuchen, dass Formular abzusenden.

Am Ende können wir per Router auf die Seite des neuen Beitrag umleiten. Die Funktion `insert()` einer Collection gibt die erzeugte `id` des Objektes zurück, welches in die Datenbank eingefügt wurde. Die Funktion `go()` des Routers wird uns die URL aus den Parametern erzeugen.

Das REsultat ist, dass wenn der Benutzer auf den Absende-Button drückt, ein Beitrag angelegt wird und der Benutzer sofort auf die die Diskussionsseite für diesen Beitrag gelangt.

### Etwas Sicherheit

Das Anlegen von Beiträgen funktioniert soweit. Aber wir wollen nicht, dass jeder x-beliebige Besucher der Webseite es kann. Wir möchten, dass Benutzer eingeloggt sind, um Beiträge anzulegen. Sicherlich könnten wir das Formular zum Anlegen von neuen Beiträgen vor ausgeloggten Benutzern verstecken. Aber der Benutzer könnte die Beiträge immer noch auf der Konsole anlegen. Das wollen wir natürlich nicht.

Datensicherheit ist glücklicherweise direkt in Meteors Collections eingebaut. Sie sind nur standardmässig deaktiviert, wenn ein neues Projekt angelegt wurde. Das erlaubt es einfach mit dem Aufbau der App anzufangen und den langweiligen Teil später zu erledigen.

Diese Stützräder braucht unsere App jetzt nicht mehr. Also nehmen wir sie nun weg. Wir entfernen das Package `insecure`:

~~~bash
$ meteor remove insecure
~~~
<%= caption "Terminal" %>

Danach wirst du feststellen, das das Formular nicht mehr funktioniert. Ohne das Package `insecure` sind client-seitige Einfügeoperationen in Collections _nicht mehr erlaubt_. Wir müssen entweder explizite Regeln anlegen, die Meteor mitteilen, dass es OK ist auf dem Client Objekte anzulegen oder wir müssen das Einfügen auf die Server-Seite verlegen.

### Einfügen von Beiträgen wieder erlauben

Wir zeigen nun, wie man das client-seitige Anlegen von Beiträgen erlaubt, damit das Formular wieder funktionsfähig wird. Wie es sich herausstellt, werden wir später eine andere Technik benutzen. Aber im Moment ist der folgende Code der einfachste Weg:

~~~js
Posts = new Meteor.Collection('posts');

Posts.allow({
  insert: function(userId, doc) {
    // only allow posting if you are logged in
    return !! userId;
  }
});
~~~
<%= caption "collections/posts.js" %>
<%= highlight "3~8" %>

<%= commit "7-2", "Removed insecure, and allowed certain writes to posts." %>

Wir rufen die Methode `allow()` auf der Posts-Collection auf. Diese teilt Meteor mit, unter welchen Umständen Clients einen Beitrag einfügen dürfen. In diesem Fall sagen wir "clients dürfen neue Beiträge anlegen, wenn sie eine  `userId` besitzen". 

Die `userId` des Benutzers, der die Anlege-Operation vornimmt wird and die Aufrufe von `allow` und `deny` weitergeleitet (oder liefert `null`, wenn kein Benutzer eingeloggt ist). Weil die Benutzer-Accounts im Kern von Meteor verankert sind, können wir uns darauf verlassen, dass die `userId` immer korrekt gesetzt ist. 

Wir haben also sichergestellt, dass der Benutzer immer eingeloggt sein muss, um einen Beitrag anzulegen. Versuch mal, dich auszuloggen und einen Beitrag anzulegen. Du solltest folgendes in der Konsole sehen:

<%= screenshot "7-2", "Insert failed: Access denied " %>

Aber wir müssen immer noch auf einige Dinge erledigen:

 - Ausgeloggte Benutzer können immer noch das Anlegeformular sehen.
 - Der Beitrag ist noch nicht mit dem Benutzer verknüpft (und es gibt keinen Code auf dem Server um dies sicherzustellen)
 - Mehrere Beiträge können angelegt werden, die die gleiche URL enthalten.

Versuchen wir diese Probleme anzugehen.

### Absichern des Zugangs zum Anlegeformular eines Beitrages 

Wir fangen an, indem wir ausgeloggte Benutzer daran hindern, das Anlegeformular aufzurufen. Wir werden dies im Router implementieren, in dem wir einen *route hook* definieren.

Ein Hook fängt den Routing-Prozess ab und kann die Aktionen, die der Router vornimmt verändern. Du kannst es als Wachmann betrachten, der deinen Ausweis überprüft, bevor er Dich hereinlässt (oder abweist).

Was wir dazu unternehmen müssen, ist zu überprüfen, ob ein Benutzer eingeloggt ist. Wenn nicht muss anstelle des Templates `postSubmit` das Template `accessDenied` ausgegeben werden. Der Router wird dazu wie folgt angepasst:

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});

var requireLogin = function() {
  if (! Meteor.user()) {
    this.render('accessDenied');
    this.stop();
  }
}

Router.before(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "18~25" %>

Wir legen auch ein Template für den verweigerten Zugriff an:

~~~html
<template name="accessDenied">
  <div class="alert alert-error">You can't get here! Please log in.</div>
</template>
~~~
<%= caption "client/views/includes/access_denied.html" %>

<%= commit "7-3", "Denied access to new posts page when not logged in." %>

Wenn du nun http://localhost:3000/submit/ aufrufst, ohne eingeloggt zu sein, solltest du folgendes sehen:

<%= screenshot "7-3", "Das Template für den verweigerten Zugriff" %>

Was Routing-Hooks richtig nett macht, ist dass sie _reaktiv_ sind. Das bedeutet, wir können deklarativ arbeiten und müssen uns nicht über Callbacks oder ähnliches kümmern, wenn der Benutzer sich einloggt. Wenn sich der Login-Zustand eines Benutzers ändert, wird das Seitentemplate sofort von `accessDenied` zu `postSubmit` geändert, ohne das wir explizit Code dafür schreiben müssen.

Log Dich ein und versuch dann die Seite neuzuladen. Du wirst eventuell das Template "Zugriff verweigert" für einen kurzen Moment aufflackern sehen bevor das Anlageformular erscheint. Der Grund dafür ist, dass Meteor Templates so früh wie möglich rendert. Es kann sein, dass dies geschieht, bevor mit dem Server darüber kommuniziert wird, ob der Benutzer eingeloggt ist. (Der Zustand wird übrigens im LocalStorage des Browsers gespeichert.)

Um dieses Problem zu verhindern (Es handelt sich um ein Problem, welches Du häufiger sehen wirst, wenn Du Dich mit den Eigenheiten von Latenz zwischen Server und Client beschäftigst), werden wir für eine kurze Zeit einen Ladebildschirm anzeigen und warten bis klar ist, ob der Benutzer eingeloggt ist oder nicht.

Dies ist notwendig, da wir ohne den Server nicht entscheiden können, ob der Benutzer eine korrekte Authorisierung vorgenommen hat oder nicht. Solange können wir keins der Template `accessDenied` oder `postSubmit` anzeigen.

Wir ändern also unseren Hook um unser Lade-Template anzuzeigen, solange `Meteor.loggingIn()` den Wert `true` zurückliefert:

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});
  
  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
  
  this.route('postSubmit', {
    path: '/submit'
  });
});

var requireLogin = function() {
  if (! Meteor.user()) {
    if (Meteor.loggingIn())
      this.render(this.loadingTemplate);
    else
      this.render('accessDenied');
    
    this.stop();
  }
}

Router.before(requireLogin, {only: 'postSubmit'});
~~~
<%= caption "lib/router.js" %>
<%= highlight "16~19" %>

<%= commit "7-4", "Show a loading screen while waiting to login." %>

### Hiding the Link

////

~~~html
<ul class="nav">
  {{#if currentUser}}<li><a href="{{pathFor 'postSubmit'}}">Beitrag anlegen</a></li>{{/if}}
</ul>
~~~
<%= caption "client/views/includes/header.html" %>

<%= commit "7-5", "Only show submit post link if logged in." %>

////

### Meteor Method: Better Abstraction and Security

////

- ////
- ////
- ////

////

- ////
- ////
- ////

////

////

////

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error)
        return alert(error.reason);
        
      Router.go('postPage', {_id: id});
    });
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>

////

////

~~~js
Posts = new Meteor.Collection('posts');

Meteor.methods({
  post: function(postAttributes) {
    var user = Meteor.user(),
      postWithSameLink = Posts.findOne({url: postAttributes.url});
    
    // ensure the user is logged in
    if (!user)
      throw new Meteor.Error(401, "You need to login to post new stories");
    
    // ensure the post has a title
    if (!postAttributes.title)
      throw new Meteor.Error(422, 'Please fill in a headline');
    
    // check that there are no previous posts with the same link
    if (postAttributes.url && postWithSameLink) {
      throw new Meteor.Error(302, 
        'This link has already been posted', 
        postWithSameLink._id);
    }
    
    // pick out the whitelisted keys
    var post = _.extend(_.pick(postAttributes, 'url', 'title', 'message'), {
      userId: user._id, 
      author: user.username, 
      submitted: new Date().getTime()
    });
    
    var postId = Posts.insert(post);
    
    return postId;
  }
});
~~~
<%= caption "collections/posts.js" %>

<%= commit "7-6", "Use a method to submit the post." %>

////

////

////

////

////

////

////

### Sorting Posts

////

~~~js
Template.postsList.helpers({
  posts: function() {
    return Posts.find({}, {sort: {submitted: -1}});
  }
});
~~~
<%= caption "client/views/posts/posts_list.js" %>
<%= highlight "3" %>

<%= commit "7-7", "Sort posts by submitted timestamp." %>

////

////
