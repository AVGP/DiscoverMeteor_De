---
title: Routing
slug: routing
date: 0005/01/01
number: 5
contents: Learne über das Routing in Meteor.|Erstelle Post Diskussionsseiten mit eindeutigen URLs.|Lerne wie Du fachgerecht die URLs verlinkst.
paragraphs: 72
---

Nun, da wir eine Liste von Posts haben (welche letztendlich vom User eingereicht werden), brauchen wir für jeden dieser Posts eine Seite, wo unsere User über eben jenen diskutieren können.

Wir möchten diese Seiten via *Permalink* erreichbar machen, das ist eine URL mit der Form `http://myapp.com/posts/xyz` (`xyz` ist eine MongoDB `_id`) welche jedem Post zuordbar ist.

Das bedeutet, dass wir irgend eine Art *Routing* benötigen, um die URL auszulesen und den richtigen Inhalt anzuzeigen.

### Hinzufügen des Iron Router Packages

[Iron Router](https://github.com/EventedMind/iron-router) ist ein Routing Package, welches speziell für Meteor-Apps konzipiert wurde.

Es hilft nicht nur beim Routing (Pfade aufsetzen), sondern es kümmert sich auch um Filter (Zuweisung von Aktionen auf eben jene Pfade) und managt sogar Subscriptions (Steuerung welche Routen auf welche Daten zugreifen dürfen). (Notiz: Iron Router wurde teilweise von *Discover Meteor* co-author Tom Coleman entwickelt.)

Lass uns zerst das Package von Atmosphere installieren:

~~~bash
$ mrt add iron-router
~~~
<%= caption "Terminal" %>

Dieser Befehl lädt und installiert das iron-router Package, vollständig einsatzbereit, in deine App. Beachte, dass du gegebenenfalls Deine Meteor-App neustarten musst, (mit `strg+c` um den Prozess zu killen, dann `mrt` zum starten der App) bevor das Package benutzt werden kann.

Beachte ebenfalls, dass Iron Router ein third-party Package ist. Das bedeutet, dass du Meteorite brauchst um es zu installieren (`meteor add iron-router` funktioniert nicht).

<% note do %>

### Router Vokabular

Wir schneiden in diesem Kapitel eine menge verschiedener Features des Routers an. Falls du Erfahrung mit solchen Frameworks wie Rails hast, bist Du mit den meisten dieser Konzepte vertraut. Jedoch falls nicht, ist hier ein kleines Glossar um dir den Start zu erleichtern:

- **Routes**: Eine Route ist der Basisbaustein des Routing. Es ist im Grunde genommen ein Set von Instruktionen, welche der App mitteilen, wo es hingeht und was zu tun ist, wenn sie auf eine URL trifft.
- **Paths**: Ein Path (Pfad) ist eine URL innerhalb deiner App. Sie kann statisch sein (`/terms_of_service`) oder dynamisch (`/posts/xyz`), und sogar Query-Parameter beinhalten (`/search?keyword=meteor`).
- **Segments**: Die einzelnen teile des Pfades, getrennt mit Slashes (`/`).
- **Hooks**: Hooks sind Aktionen, welche du vor, nach, oder selbst während des Routing-Prozesses ausführen möchtest. Ein typisches Beispiel wäre das Überprüfen der Userrechte vor dem Anzeigen einer Seite.
- **Filter**: Filter sind einfache Hooks die du global für eine oder mehrere Routes definierst.
- **Route Templates**: Jede Route muss auf ein Template verweisen. Wenn Du keines angibst, wird der Router nach eine Template mit dem gleichen Namen wie der Route suchen.
- **Layouts**: Du kannst dir Layouts als digitale Bilderrahmen vorstellen. Sie enthalten den gesamten HTML-Code welche das aktuelle Template umgeben, und ändern sich nicht, selbst wenn das Template sich ändert.
- **Controller**: Manchmal wird dir auffallen, dass viele deiner Templates die gleichen Parameter benutzen. Anstelle deinen Code zu kopieren, kannst du diese Routen von einem *Routing Controller* erben lassen, welcher die gesamte Routinglogik enthält.

Für mehr Informationen über den Iron Router, schau dir [die volle Dokumentation auf GitHub](https://github.com/EventedMind/iron-router) an.

<% end %>

### Routing: URLs nach Templates mappen

////

////

////

<%= diagram "router-diagram", "Layouts and templates.", "pull-center" %>

////

////

~~~html
<head>
  <title>Microscope</title>
</head>
~~~
<%= caption "client/main.html" %>

////

~~~html
<template name="layout">
  <div class="container">
  <header class="navbar">
    <div class="navbar-inner">
      <a class="brand" href="/">Microscope</a>
    </div>
  </header>
  <div id="main" class="row-fluid">
    {{yield}}
  </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout'
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js"%>

////

<% note do %>

### The `/lib` folder

////

////

<% end %>

### Named Routes

////

////

////

////

~~~html
<header class="navbar">
  <div class="navbar-inner">
    <a class="brand" href="{{pathFor 'postsList'}}">Microscope</a>
  </div>
</header>

//...
~~~
<%= caption "client/views/application/layout.html"%>
<%= highlight "3" %>

<%= commit "5-1", "Very basic routing." %>

### Waiting on Data

////

////

////

~~~js
Router.configure({
  layoutTemplate: 'layout',
  loadingTemplate: 'loading',
  waitOn: function() { return Meteor.subscribe('posts'); }
});

Router.map(function() {
  this.route('postsList', {path: '/'});
});
~~~
<%= caption "lib/router.js" %>
<%= highlight "3,4" %>

////

////

////

////

////

////

~~~html
<template name="loading">
  {{>spinner}}
</template>
~~~
<%= caption "client/views/includes/loading.html" %>

////

<%= commit "5-2", "Wait on the post subscription." %>

<% note do %>

### A First Glance At Reactivity

////

////

////

<% end %>

### Routing To A Specific Post

////

////

////

~~~html
<template name="postPage">
  {{> postItem}}
</template>
~~~
<%= caption "client/views/posts/post_page.html" %>

////

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});

  this.route('postPage', {
    path: '/posts/:_id'
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~6" %>

////

////

////

////

<%= diagram "router-diagram-2", "The data context.", "pull-center" %>

////

~~~js
Router.map(function() {
  this.route('postsList', {path: '/'});

  this.route('postPage', {
    path: '/posts/:_id',
    data: function() { return Posts.findOne(this.params._id); }
  });
});

~~~
<%= caption "lib/router.js" %>
<%= highlight "4~7" %>

////

////

<% note do %>

### More About Data Contexts

////

////

~~~html
{{#each widgets}}
  {{> widgetItem}}
{{/each}}
~~~

////

~~~html
{{#with myWidget}}
  {{> widgetPage}}
{{/with}}
~~~

////

~~~js
{{> widgetPage myWidget}}
~~~

<% end %>

### Using a Dynamic Named Route Helper

////

////

~~~html
<template name="postItem">
  <div class="post">
    <div class="post-content">
      <h3><a href="{{url}}">{{title}}</a><span>{{domain}}</span></h3>
    </div>
    <a href="{{pathFor 'postPage'}}" class="discuss btn">Discuss</a>
  </div>
</template>
~~~
<%= caption "client/views/posts/post_item.html"%>
<%= highlight "6" %>
<%= commit "5-3", "Routing to a single post page." %>

////

////

////

////

////

<%= screenshot "5-2", "A single post page." %>

<% note do %>

### HTML5 pushState

////

////

////

<% end %>