---
title: Fehler
slug: errors
date: 0009/01/01
number: 9
contents: Ein besserer Mechanismus für die Anzeige von Fehlern und Nachrichten.| Lerne wie man `Template.rendered` einsetzt, um mitzubekommen, ob ein Benutzer den Fehler gesehen hat.| Benutze einen Router-Filter, um sicherzustellen, dass Fehler nur einmal angezeigt werden.
paragraphs: 31
---

Die Standardfunktion des Browsers `alert()` ist, um den Benutzer zu warnen, dass ein Problem vorliegt ist eine unbefriedegende Lösung. Und es ist sicherlich aus Sicht der User-Experience suboptimal. Das können wir besser.

Anstelle dessen bauen wir ein flexibleres Fehler-Reporting. Es wird besser dafür geeignet sein, dem Benutzer mitzuteilen, was passiert, ohne seinen Arbeitsfluss zu unterbrechen.

### Lokale Collections

Wir werden ein simples System aufbauen, welches den Überblick behält, welche Fehler der Benutzer gesehen hat. Zusätzlich wird es die neuen Nachrichten in einem speziellem Bereich der Seite anzeigen. Dieses UX-Pattern ist nützlich, wenn wir den Benutzer informieren wollen, dass etwas passiert ist, ohne den Arbeitfluss zu unterbrechen.

Was wir vorhaben ist ähnlich den Nachrichten, die man oft in Ruby on Rails-Applikationen sieht. Wir werden versuchen ein wenig geschickter zu sein, da wir zum einen die Nachrichten client-seitig implementieren und wissen, wann ein Benuzter die Nachricht gesehen hat.

Als Anfang erstellen wir eine Collection, die die Fehler speichert. Dadurch, dass Fehler immer nur für die aktuelle Sitzung gelten, muss diese Collection nicht persistiert werden. Deshalb machen wir etwas Neues: Wir erzeugen eine lokale Collection, die nur im Browser existiert. Es wird kein Versuch unternommen, diese mit dem Server zu synchronisieren.

Um das zu erreichen, erzeugen wir den Fehler in einer Datei, die nur auf dem Client verwendet wird. Der Name der Collection wird auf `null` gesetzt. Wir erstellen eine Funktion `throwError`, das den Fehler in unsere neue lokale Collection einfügt.

~~~js
// Local (client-only) collection
Errors = new Meteor.Collection(null);
~~~
<%= caption "client/helpers/errors.js" %>

Jetzt, da die Collection erzeugt ist, können wir die Funktion `throwError` hinzufügen. Mit dieser werden wir Fehler anlegen. Wir müssen uns nicht über `allow` oder `deny` oder ähnliches kümmern, weil die lokale Collection nicht in die Mongo-Datenbank gespeichert werden wird.

~~~js
throwError = function(message) {
  Errors.insert({message: message})
}
~~~
<%= caption "client/helpers/errors.js" %>

Der Vorteil einer lokalen Collection um die Fehler zu speichern, ist das diese - wie allen Typen von Collections - das diese reaktive sind. Das bedeutet, dass wir Fehler auf die gleiche Art und Weise deklarativ anzeigen können, wie wir es mit anderen Daten aus Collections können.

### Das Anzeigen von Fehlern

Wir werden die Fehler im oberen Teil unseres Hauptlayouts anzeigen:

~~~html
<template name="layout">
  <div class="container">
    {{> header}}
    {{> errors}}
    <div id="main" class="row-fluid">
      {{yield}}
    </div>
  </div>
</template>
~~~
<%= caption "client/views/application/layout.html" %>
<%= highlight "7" %>

Nun legen wird die Templates `errors` und `error` in der Datei `errors.html` an.

~~~html
<template name="errors">
  <div class="errors row-fluid">
    {{#each errors}}
      {{> error}}
    {{/each}}
  </div>
</template>

<template name="error">
  <div class="alert alert-error">
    <button type="button" class="close" data-dismiss="alert">&times;</button>
    {{message}}
  </div>
</template>
~~~
<%= caption "client/views/includes/errors.html" %>

<% note do %>

### Doppel-Templates

Dir wird vielleicht aufgefallen sein, dass wir zwei Templates in eine Datei gelegt haben. Bisher haben wir uns an eine "Eine Datei - ein Template"-Konvention gehalten. Aber was Meteor betrifft, würde eine einzelne Datei genausogut funktionieren (wobei das eine sehr unübersichtliche Template-Datei wäre).

In diesem Fall machen wir eine Ausnahme, da beide Templates sehr kurz sind. Dadurch wird unser Repository ein wenig übersichtlicher.

<% end %>

Jetzt schreiben wir unseren Template-Helper und schon können wir loslegen!

~~~js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});
~~~
<%= caption "client/views/includes/errors.js" %>

<%= commit "9-1", "Basic error reporting." %>

### Das Anlegen von Fehlern

Wir wissen jetzt, wie man Fehler anzeigt. Aber wir müssen sie erst anlegen, bevor wir etwas sehen werden. Fehler werden im allgemeinen dadurch ausgelöst, dass die Benutzer neuen Content anlegen. Also werden wir im Callback der Beitragserzeugung auf Fehler überprüfen. Wenn diese eintreten wird eine entsprechende Nachricht angezeigt.

Zusätzlich, falls wir den Fehler mit Code `302` erhalten (Dieser bedeutet, dass ein Beitrag mit der gewünschten URL schon existiert), werden wir den Benutzer zu dem bereits existierenden Beitrag weiterleiten. Wir können die `_id` des existierenden Beitrags aus dem Attribut `error.details` auslesen (Du erinnerst Dich bestimmt: Wir haben die `_id` des Beitrags als das dritte Argument `details` von unserer Klasse `Error` in Kapitel 7 übergeben).

~~~js
Template.postSubmit.events({
  'submit form': function(e) {
    e.preventDefault();
    
    var post = {
      url: $(e.target).find('[name=url]').val(),
      title: $(e.target).find('[name=title]').val(),
      message: $(e.target).find('[name=message]').val()
    }
    
    Meteor.call('post', post, function(error, id) {
      if (error) {
        // display the error to the user
        throwError(error.reason);
        
        if (error.error === 302)
          Router.go('postPage', {_id: error.details})
      } else {
        Router.go('postPage', {_id: id});
      }
    });
  }
});
~~~
<%= caption "client/views/posts/post_submit.js" %>
<%= highlight "12~14, 16~21" %>

<%= commit "9-2", "Actually use the error reporting." %>

////

<%= screenshot "9-1", "Triggering an error" %>

### Fehlermeldungen wieder Entfernen

Du wirst vielleicht versucht haben, den Close-Button des Fehler anzuklicken. Falls ja, wirst Du sehen, dass die Fehlermeldung verschwindet - nur um wiederzu kehren sobald eine weitere Seite geladen wird. Was geht da vor sich?

Der Close-Button löst das von Bootstrap eingebettete Javascript aus: Es hat allerdings nichts mit Meteor zu tun. Was also passiert ist das Bootstrap lediglich das Element `div` aus dem DOM entfernt - aber nicht aus der Meteor-Collection. Das bedeutet, dass der Fehler natürlich wieder angezeigt wird, sobald Meteor die Seite neu rendert.

Wenn wir also nicht wollen, dass der Fehler unerbittlich immer wieder von den Toten aufersteht, um den Benutzer an längst vergangene 

////

////

~~~js
// Local (client-only) collection
Errors = new Meteor.Collection(null);

throwError = function(message) {
  Errors.insert({message: message, seen: false})
}

clearErrors = function() {
  Errors.remove({seen: true});
}
~~~
<%= caption "client/helpers/errors.js" %>
<%= highlight "5,8~10" %>

////

~~~js
// ...

Router.before(requireLogin, {only: 'postSubmit'})
Router.before(function() { clearErrors() });
~~~
<%= caption "lib/router.js" %>
<%= highlight "4" %>

////

////

////

////

////

~~~js
Template.errors.helpers({
  errors: function() {
    return Errors.find();
  }
});

Template.error.rendered = function() {
  var error = this.data;
  Meteor.defer(function() {
    Errors.update(error._id, {$set: {seen: true}});
  });
};
~~~
<%= caption "client/views/includes/errors.js" %>
<%= highlight "7~12" %>

<%= commit "9-3", "Monitor which errors have been seen, and clear on routing." %>

////

////

<% note do %>

### The `rendered` callback

////

////

<% end %>