---
title: Vorbereitung
slug: getting-started
date: 0002/01/01
number: 2
contents: Meteor & Meteorite installieren.|Erfahre mehr über die 5 Typen der Meteor-Packages.|Die Datei-Struktur einer Meteor App aufbauen.
paragraphs: 49
---

$$First impressions are important, and Meteor's install process should be relatively painless. In most case, you'll be up and running in less than five minutes. 
Der erste Eindruck ist entscheidend und Meteor's Installationsprozess sollte relativ einfach vonstatten gehen. Im Normalfall solltest du es in weniger als 5 Minuten installiert und lauffähig haben.

$$To begin with, we can install Meteor by opening a terminal window and typing:
Du kannst Meteor installieren, in dem du das Terminal öffnest und folgendes eingibst:

~~~bash
$ curl https://install.meteor.com | sh
~~~

$$This will install the `meteor` executable onto your system and have you ready to use Meteor.
Diest installiert die ausführbare `meteor` Programmdatei in deinem System und macht dich bereit mit Meteor zu starten.

<% note do %>

### Meteor *nicht* installieren


$$If you can't (or don't want to) install Meteor locally, we recommend checking out [Nitrous.io](http://nitrous.io).
Wenn du Meteor nicht lokal installieren kannst (oder willst) empfehlen wir dir [Nitrous.io](http://nitrous.io).

$$Nitrous.io is a service that lets you run apps and edit their code right in your browser, and we've written [a short guide](https://www.discovermeteor.com/2013/10/04/meteor-nitrous/) to help you get set up. 
Auf Nitrous.io kannst du deine App laufen lassen und den Code direkt im Browser bearbeiten. Wir haben dazu [eine kurze Anleitung](https://www.discovermeteor.com/2013/10/04/meteor-nitrous/) geschrieben um die Installation zu vereinfachen. 

$$You can simply follow that guide up to (and including) the "Installing Meteor & Meteorite" section, and then follow along with the book again starting from the "Creating a Simple App" section of this chapter. 
Du kannst einfach der Anleitung folgen bis (und mit) dem Abschnitt "Installing Meteor & Meteorite" und dann wieder ab dem Abschnitt "Creating a Simple App" in gleichen Kapitel.


<% end %>
 
### Meteorite

$$Due to the fact that Meteor doesn't yet support third-party packages out of the box, Tom Coleman (one of this book's authors) and some members of the community have created [Meteorite](http://oortcloud.github.com/meteorite/), a wrapper for Meteor. Meteorite also takes care of installing Meteor for you and hooking it together with any packages you might find.
Da Meteor noch keine externen Packages unterstützt haben Tom Coleman (einer der Autoren dieses Buches) und einige Community-Mitglieder [Meteorite](http://oortcloud.github.com/meteorite/) entwickelt, ein Hilfsprogramm/Wrapper für Meteor. Meteorite sorgt sich auch um die Installation von Meteor und verbindet den erhältlichen Packages.

$$Since we'll be relying on third-party packages for some of Microscope's features, let's install Meteorite. 
Da wir für einige Microscope Features externe Packages einsetzen, müssen wir Meteorite nun installieren. 

### Meteorite installieren

$$You'll need to ensure node and git are installed on your machine. Install them in the standard way for your OS, or try these links:
Stelle sicher, dass Node und Git auf deinem Computer installiert sind. Installiere diese wie für dein Betriebssystem üblich oder informiere dich über folgende Links:
 
- [Node download site](http://nodejs.org/download/)
- [Git download site](http://git-scm.com/downloads)

$$Second, let's install Meteorite. As it's a [npm](https://npmjs.org/) executable (Node Packaged Module, Node's standard module format), we install it with:
Jetzt können wir Meteorite installieren. Da es eine [npm](https://npmjs.org/) Erweiterung ist (Node Packaged Modul, Node's standard Modulformat), installieren wir es damit:

~~~bash
$ npm install -g meteorite
~~~

<% note do %>

### Fehler in Berechtigungen?

$$On some machines you may need root permission to install Meteorite. To avoid problems, make sure you use `sudo -H`:
Auf manchen Systemen kann die Installation root Rechte benötigen. Um dies zu umgehen benutze `sudo -H`:

~~~bash
$ sudo -H npm install -g meteorite
~~~

$$You can read more about this issue in the [Meteorite documentation](https://github.com/oortcloud/meteorite/blob/master/README.md#permission-woes).
Du kannst mehr zu diesem Problem in der [Meteorite Dokumentation](https://github.com/oortcloud/meteorite/blob/master/README.md#permission-woes) nachlesen.

<% end %>

$$That's it! Meteorite will handle things from here.
Das wärs schon! Meteorite übernimmt den Rest für dich.

$$Note: there is no Windows support for Meteorite yet, but you can take a look at [our windows tutorial](http://themeteorbook.com/2013/03/20/using-meteor-and-atmopshere-on-windows/) instead.
Beachte: Es gibt momentan noch keine Windows Ünterstützung für Meteorite, aber schau doch mal stattdessen unser [Windows Tutorial](http://themeteorbook.com/2013/03/20/using-meteor-and-atmopshere-on-windows/) an.


<% note do %>

  ### `mrt` vs `meteor`
  
$$Meteorite installs the `mrt` executable, which we'll use to install packages into our application. When we want to run our server, however, we use the `meteor` executable.
Meteorite installiert die `mrt` Programmdatei, welche wir nutzen können um Packages in unserer App zu installieren. Um den Server zu starten nutzen wir hingegen den `meteor` Befehl.
  
<% end %>

### Eine einfache App erzeugen

$$Now that we have installed Meteorite, let's create an app. To do this, we use Meteorite's command line tool `mrt`:
Nun da wir Meteorite installiert haben, erstellen wir eine App. Dies machen wir mit dem Metorite Befehl `mrt`:

~~~bash
$ mrt create microscope
~~~

$$This command will download Meteor, and set up a basic, ready to use Meteor project for you. When it's done, you should see a directory, `microscope/`, containing the following:
Dieser Befehl lädt Meteor herunter und erstellt ein einfaches, lauffähiges Meteor Projekt für dich. Sobald es fertig ist solltest du ein Verzeichnis `microscope/` mit folgendem Inhalt sehen:

~~~bash
microscope.css  
microscope.html 
microscope.js   
smart.json 
~~~

$$The app that Meteor has created for you is a simple boilerplate application demonstrating a few simple patterns. 
Die App die Meteor für dich erstellt hat ist eine einfache Start-App die einige einfache Strukturen zeigen soll.

$$Even though our app doesn't do much, we can still run it. To run the app, go back to your terminal and type:
Obwohl die App noch nicht viel macht können wir sie nun starten. Um die App zu starten gehe zurück in das Terminal und gib folgendes ein:

~~~bash
$ cd microscope
$ meteor
~~~

$$Now point your browser to `http://localhost:3000/` (or the equivalent `http://0.0.0.0:3000/`) and you should see something like this: 
Öffne nun in deinem Browser die URL `http://localhost:3000/` (oder identisch `http://0.0.0.0:3000/`), womit du nun ungefähr dies sehen solltest:

<%= screenshot "2-1", "Meteors Hello World." %>

<%= commit "2-1", "Einfaches Microscope-Projekt erzeugt." %>

$$Congratulations! You've got your first Meteor app running. By the way, to stop the app all you need to do is bring up the terminal tab where the app is running, and press `ctrl+c`. 
Gratuliere! Du deine erste Meteor App ist nun lauffähig. Um die App wieder zu stoppen, gehe zurück ins Terminal in dem die App läuft und drücke `ctrl+c`. 

### Package hinzufügen

$$We will now use Meteorite to add a smart package that will let us include [Bootstrap](http://getbootstrap.com/) in our project:
Nun nutzen wir Meteorite um ein "Smart Package" hinzuzufügen, welches [Bootstrap](http://getbootstrap.com/) in unser Projekt einbindet.

~~~bash
$ mrt add bootstrap
~~~

<%= commit "2-2", "Bootstrap package hinzugefügt." %>

<% note do %>

### Anmerkung zu Packages

$$When speaking about packages in the context of Meteor, it pays to be specific. Meteor uses five basic types of packages:
Wenn wir von Packages im Meteor Kontext sprechen müssen wir dies etwas differnzieren. Meteor nutzt fünf Basis Typen von Packages:

$$- The Meteor core itself is split into different **core packages**. They are included with every Meteor app, and you will pretty much never need to worry about these.
- Der Meteor Core ist selbst in verschiedene **Core Packages** unterteilt. Sie sind in jeder Meteor App integriert und du musst dich eigentlich nie um diese kümmern.
$$- Meteor **smart packages** are a group of [about 37 packages](http://docs.meteor.com/#packages) (you can get the full list with `meteor list`) that come bundled with Meteor and that you can optionally import into your own app. You can add them even when you're not using Meteorite, with `meteor add packagename`. 
- Meteor **Smart Packages** sind eine Gruppe von [ungefähr 37 Packages](http://docs.meteor.com/#packages) (du kannst die komplette Liste mit `meteor list` abrufen) die mit Meteor im Verbund können und die du wahlweise in deiner App importieren kannst. Du kannst sie in Verwendung mit Meteorite mit dem Befehl `meteor add packagename` hinzufügen.
$$- **Local packages** are custom packages you can create yourself and put in the `/packages` directory. You don't need Meteorite to use them either.
-- **Lokale Packages** sind benutzerdefinierte Packages die du selbst erstellen und in `/packages` ablegen kannst. Dazu benötigst du auch nicht Meteorite.
$$- **Atmosphere smart packages** are third-party Meteor packages listed on [Atmosphere](http://atmosphere.meteor.com). Meteorite is needed to import and use them. 
- **Atmosphere Smart Packages** sind externe Meteor Packages, die in [Atmosphere](http://atmosphere.meteor.com) zu finden sind. Um diese zu importieren und nutzen wird Meteorite benötigt.
$$- **NPM packages** (Node Packaged Modules) are Node.js packages. Although they don't work out of the box with Meteor, they *can* be used by the previous types of packages. 
- **NPM Packages** (Node Packaged Modules) sind Node.js Packages. Obwohl diese nicht einfach so mit Meteor funktionieren, *können* sie von vorher genannten Typen von Packages genutzt werden.

<% end %>

### Die Datei-Struktur einer Meteor App

$$Before we begin coding, we must set up our project properly. To ensure we have a clean build, open up the `microscope` directory and delete `microscope.html`, `microscope.js`, and `microscope.css`. 
Bevor wir zu programmieren beginnen, müssen wir unsere Projekt korrekt aufsetzen. Um eine saubere Struktur zu gewährleisten, öffnen wir das `microscope` Verzeichnis und löschen `microscope.html`, `microscope.js und `microscope.css`.

$$Next, create five root directories inside `/microscope`: `/client`, `/server`, `/public`, `/lib`, and `/collections`, and we'll also create empty `main.html` and `main.js` files inside `/client`. Don't worry if this breaks the app for now, we'll start filling in these files in the next chapter. 
Danach erstellen wir fünf Verzeichnisse in `/microscope`: `/client`, `/server`, `/public`, `/lib` und `/collections`. Weiter erstellen wir leere `main.html` und `main.js` Dateien in `/client`. Keine Sorge wenn du dadurch die App vorübergehend unbrauchbar machst - wir befüllen die Dateien im nächsten Kapitel.

$$We should mention that some of these directories are special. When it comes to files, Meteor has a few rules:
Erwähnt werden sollte auch, dass einige dieser Verzeichnisse speziell sind. Im Bezug auf Dateien hat Meteor einige Regeln:

$$- Code in the `/server` directory only runs on the server.
- Code im `/server` Verzeichnis läuft nur auf dem Server.
$$- Code in the `/client` directory only runs on the client.
- Code im `/client` Verzeichnis läuft nur auf dem Client.
$$- Everything else runs on both the client and server.
- Alles andere läuft auf dem Client und dem Server.
$$- Files in `/lib` are loaded before anything else.
- Dateien in `/lib` werden vor allem anderen geladen.
$$- Any `main.*` file is loaded after everything else.
- Alle `main.*` Dateien werden nach allem anderen geladen.
$$- Your static assets (fonts, images, etc.) go in the `/public` directory. 
- Deine statischen Assets (Schriften, Bilder etc.) gehören in das `/public` Verzeichnis.

$$Note that although Meteor has these rules, it doesn't really force you to use any predefined file structure for your app if you don't want to. So the structure we suggest is just our way of doing things, not a rule set in stone. 
Beachte dass obwohl Meteor diese Regeln hat, du trotzdem nicht zwingend diese vordefinierte Dateistruktur für deine App verwenden musst. Die Struktur die wir vorschlagen ist nur ein möglicher Weg und ist nicht in Stein gemeisselt.

$$We encourage you to check out the [official Meteor docs](http://docs.meteor.com/#structuringyourapp) if you want more details on this.
Lies doch den auch die [offizielle Meteor Dokumentation](http://docs.meteor.com/#structuringyourapp), wenn du mehr Informationen hierzu möchtest.

<% note do %>

### Ist Meteor MVC?

$$If you're coming to Meteor from other frameworks such as Ruby on Rails, you might be wondering if Meteor apps adopt the MVC (Model View Controller) pattern. 
Wenn zu von anderen Frameworks wie Ruby on Rails kommst fragst du dich vielleicht, ob Meteor Apps das MVC (Model View Controller) Pattern verwenden.

$$The short answer is no. Unlike Rails, Meteor doesn't impose any predefined structure to your app. So in this book we'll simply lay out code in the way that makes the most sense to us, without worrying too much about acronyms.
Die kurze Antwort ist nein. Im Gegensatz zu Rails zwingt dich Meteor nicht eine vorgegeben Struktur für deine App zu nutzen. In diesem Book verwenden wir den Code wie er uns am meisten Sinn macht, ungeachtet etwaiger Acronymen.


<% end %>

### Nicht öffentlich?

$$OK, we lied. We don't actually need the `public/` directory for the simple reason that Microscope doesn't use any static assets! But since most other Meteor apps are going to include at least a couple images, we thought it was important to cover it too. 
Ok, wir haben etwas gelogen. Wir brauchen das `/public` Verzeichnis nicht unbedingt. Mit der einfachten Begründung, dass Microscope keine statischen Assets benötigt. Aber da die meisten anderen Meteor Apps mindestens einige Bilder einbinden, wollten wir es trotzdem abdecken.

$$By the way, you might also notice a hidden `.meteor` directory. This is where Meteor stores its own code, and modifying  things in there is usually a very bad idea. In fact, you don't really ever need to look in this directory at all. The only exceptions to this are the `.meteor/packages` and `.meteor/release` files, which are respectively used to list your smart packages and the version of Meteor to use. When you add packages and change Meteor releases, it can be helpful to check the changes to these files.
Vielleicht hast du das versteckte `.meteor` Verzeichnis bemerkt. Dort speichert Meteor seinen eigenen Code und hier Sachen zu verändern ist normalerweise eine schlechte Idee. Grundsätzlich musst du dieses Verzeichnis nicht kennen. Die einzigen Ausnahme sind die `.meteor/packages` und `.meteor/release' Dateien, welche genutzt werden können, um die Smart Packages und die Version von Meteor nachzusehen. Wenn du Packages hinzufügst oder den Meteor Release änderst kann es hilfreich sein, diese Dateien zu prüfen.

<% note do %>

### Unterstriche oder CamelCase

$$The only thing we'll say about the age-old underscore (`my_variable`) vs camelCase (`myVariable`) debate is that it doesn't really matter which one you pick as long as you stick to it. 
Das einzige das wir zu der uralten Unterstriche (`my_variable`) vs CamelCase (`myVariable`) Debatte sagen ist, dass es nicht darauf ankommt welches du wählst, solange du dabei bleibst.

$$In this book, we're using camelCase because it's the usual JavaScript way of doing things (after all, it's JavaScript, not java_script!). 
In diesem Buch verwenden wir CamelCase, da es üblicherweise so in JavaScript gemacht wird (schliesslich heisst es JavaScript und nicht java_script!).

$$The only exceptions to this rule are file names, which will use underscores (`my_file.js`), and CSS classes, which use hyphens (`.my-class`). The reason for this is that in the filesystem, underscores are most common, while the CSS syntax itself already uses hyphens (`font-family`, `text-align`, etc.).
Die einzige Ausnahme zu dieser Regel sind Dateinamen, welche in welchen Unterstriche (`my_file.js`) verwendet werden, sowie CSS Klassen die mit Bindestriche (`.my-class`) geschrieben werden. Der Grund dafür ist, dass im Dateisystem Unterstriche geläufig sind, während in der CSS Syntax sich Bindestriche durchgesetzt haben (`font-family`, `text-align` etc.).

<% end %>

### Verwendung von CSS

$$This book is not about CSS. So to avoid slowing you down with styling details, we've decided to make the whole stylesheet available from the start, so you don't need to worry about it ever again. 
Dieses Buch behandelt kein CSS. Um dich also nicht mit Styling Details zu belästigen haben wir uns entschieden das gesamte Stylesheet von Anfang verfügbar zu machen, damit du dich nicht damit bemühen musst.

$$CSS automatically gets loaded and minified by Meteor, so unlike other static assets it goes into `/client`, not `/public`. Go ahead and create a `client/stylesheets/` directory now, and put this `style.css` file inside it:
CSS wird automatisch von Meteor geladen und komprimiert, desshalb muss es im Gegensatz zu den anderen statischen Assets im `/client` und nicht im `/public` Verzeichnis abgelegt werden. Erstelle nun ein `client/stylesheets/` Verzeichnis und speichere dieses `styles.css` darin:


~~~css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","Datei-Struktur modifiziert." %>

<% note do %>

### Eine Anmerkung zu CoffeeScript

$$In this book we'll be writing in pure JavaScript. But if you prefer CoffeeScript, Meteor has you covered. Simply add the CoffeeScript package and you'll be good to go:
In diesem Buch verwenden wir pures JavaScript. Solltest du CoffeeScript bevorzugen ist Meteor auch dazu fähig. Füge einfach das CoffeeScript Package hinzu:

`mrt add coffeescript`

<% end %>
