---
title: Vorbereitung
slug: getting-started
date: 0002/01/01
number: 2
contents: Meteor & Meteorite installieren.|Erfahre mehr über die 5 Typen der Meteor-Packages.|Die Datei-Struktur einer Meteor App aufbauen.
paragraphs: 49
---

Der erste Eindruck ist entscheidend und Meteors Installationsprozess sollte relativ einfach sein. Normalerweise sollte es in weniger als 5 Minuten installiert und lauffähig sein.

Du kannst Meteor installieren, in dem du das Terminal öffnest und Folgendes eingibst:

~~~bash
$ curl https://install.meteor.com | sh
~~~

Dies installiert das ausführbare Programm `meteor` auf deinem System und erlaubt Dir Meteor zu benutzen.

<% note do %>

### Meteor *nicht* installieren

Wenn du Meteor nicht lokal installieren kannst (oder willst) empfehlen wir dir [Nitrous.io](http://nitrous.io).

Auf Nitrous.io kannst du deine App laufen lassen und den Code direkt im Browser bearbeiten. Wir haben dazu [eine kurze Anleitung](https://www.discovermeteor.com/2013/10/04/meteor-nitrous/) geschrieben, um die Installation zu vereinfachen. 

Du kannst einfach dieser Anleitung folgen bis zu dem Abschnitt "Installing Meteor & Meteorite". Danach folgst du wieder ab dem Abschnitt "Creating a Simple App" in diesem Kapitel.


<% end %>
 
### Meteorite

Da Meteor noch keine externen Packages unterstützt, haben Tom Coleman (einer der Autoren dieses Buches) und einige Community-Mitglieder [Meteorite](http://oortcloud.github.com/meteorite/) entwickelt, ein Hilfsprogramm/Wrapper für Meteor. Meteorite kümmert sich auch um die Installation von Meteor und verbindet den erhältlichen Packages.

Da wir für einige Microscope Features externe Packages einsetzen, fangen wir mit der Installation von Meteorite an. 

### Meteorite installieren

Stelle sicher, dass Node und Git auf deinem Computer installiert sind. Installiere diese wie für dein Betriebssystem üblich oder informiere dich über folgende Links:
 
- [Node download site](http://nodejs.org/download/)
- [Git download site](http://git-scm.com/downloads)

Jetzt können wir Meteorite installieren. Da es eine [npm](https://npmjs.org/) Erweiterung ist (Node Packaged Module, Das Standard-Modulformat von Node), installieren wir es mit:

~~~bash
$ npm install -g meteorite
~~~

<% note do %>

### Fehler in Berechtigungen?

Auf manchen Systemen kann die Installation Root-Rechte benötigen. Um dies zu umgehen, benutze `sudo -H`:

~~~bash
$ sudo -H npm install -g meteorite
~~~

Du kannst mehr zu diesem Problem in der [Meteorite Dokumentation](https://github.com/oortcloud/meteorite/blob/master/README.md#permission-woes) nachlesen.

<% end %>

Das war es schon! Meteorite übernimmt den Rest für dich.

Beachte: Es gibt momentan noch keine Windows-Ünterstützung für Meteorite. Aber schau doch mal stattdessen unser [Windows Tutorial](http://themeteorbook.com/2013/03/20/using-meteor-and-atmopshere-on-windows/) an.


<% note do %>

  ### `mrt` vs `meteor`
  
Meteorite installiert die Programmdatei `mrt`. Diese nutzen wir um Packages in unserer App zu installieren. Um den Server zu starten nutzen wir hingegen den `meteor` Befehl.
  
<% end %>

### Eine einfache App erzeugen

Nun da wir Meteorite installiert haben, erstellen wir eine App. Dies machen wir mit dem Metorite-Befehl `mrt`:

~~~bash
$ mrt create microscope
~~~

Dieser Befehl lädt Meteor herunter und erstellt ein einfaches, lauffähiges Meteor-Projekt für dich. Sobald es fertig ist solltest du ein Verzeichnis `microscope/` mit folgendem Inhalt sehen:

~~~bash
microscope.css  
microscope.html 
microscope.js   
smart.json 
~~~

Die App die Meteor für dich erstellt hat ist eine einfache Boilerplate-App, die einige einfache Strukturen enthält.

Obwohl die App noch nicht viel macht, können wir sie nun starten. Um die App zu starten wechsle zurück in das Terminal und gib Folgendes ein:

~~~bash
$ cd microscope
$ meteor
~~~

Öffne nun in deinem Browser die URL `http://localhost:3000/` (oder identisch `http://0.0.0.0:3000/`). Du soltest nun ungefähr dies sehen:

<%= screenshot "2-1", "Meteors Hello World." %>

<%= commit "2-1", "Einfaches Microscope-Projekt erzeugt." %>

Gratuliere! Deine erste Meteor App ist nun lauffähig. Um die App wieder zu stoppen, wechsle zurück in das Terminal, in dem die App läuft, und drücke `ctrl+c`. 

### Ein Package hinzufügen

Nun nutzen wir Meteorite um ein "Smart Package" hinzuzufügen, welches [Bootstrap](http://getbootstrap.com/) zu unsem Projekt hinzufügt.

~~~bash
$ mrt add bootstrap
~~~

<%= commit "2-2", "Bootstrap package hinzugefügt." %>

<% note do %>

### Eine Anmerkung zu Packages

Wenn wir von Packages im Kontext von Meteor sprechen müssen wir dies etwas genauer sein. Meteor nutzt fünf Basis-Typen von Packages:

- Der Meteor-Core ist selbst in verschiedene **Core Packages** unterteilt. Sie sind in jeder Meteor-App integriert und du musst dich eigentlich nie um diese kümmern.
- Meteor **Smart Packages** sind eine Gruppe von [ungefähr 37 Packages](http://docs.meteor.com/#packages) (Du kannst die komplette Liste mit `meteor list` abrufen), die mit Meteor im Verbund können und die du wahlweise in deine App importieren kannst. Du kannst sie - auch wenn du Meteorite nicht nutzt - mit dem Befehl `meteor add packagename` hinzufügen.
-- **Lokale Packages** sind benutzerdefinierte Packages, die du selbst erstellen und im Verzeichnis `/packages` ablegen kannst. Dazu benötigst du ebenfalls nicht Meteorite.
- **Atmosphere Smart Packages** sind externe Meteor-Packages, die auf [Atmosphere](http://atmosphere.meteor.com) zu finden sind. Um diese zu importieren und zu nutzen wird Meteorite benötigt.
- **NPM Packages** (Node Packaged Modules) sind Node.js-Packages. Obwohl diese nicht einfach so mit Meteor funktionieren, *können* sie von vorher genannten Typen von Packages genutzt werden.

<% end %>

### Die Datei-Struktur einer Meteor-App

Bevor wir mit dem Programmieren anfangen, müssen wir unser Projekt korrekt aufsetzen. Um einen problemlosen Build-Prozess zu gewährleisten, öffnen wir das Verzeichnis `microscope` und löschen die Dateien `microscope.html`, `microscope.js` und `microscope.css`.

Danach erstellen wir fünf Verzeichnisse in `/microscope`: `/client`, `/server`, `/public`, `/lib` und `/collections`. Weiterhin legen wir die leeren Dateien `main.html` und `main.js` in `/client` an. Keine Sorge, dass du die App dadurch vorübergehend unbrauchbar machst - wir befüllen die Dateien im nächsten Kapitel.

Erwähnt werden sollte auch, dass einige dieser Verzeichnisse speziell sind. In Bezug auf Dateien hat Meteor folgende Regeln:

- Programm-Code im Verzeichnis `/server` wird nur auf dem Server ausgeführt.
- Programm-Code im Verzeichnis im Verzeichnis `/client` läuft nur auf dem Client.
- Dateien an anderen Orten werden sowohl auf dem Client als auch auf  dem Server ausgeführt.
- Dateien in `/lib` werden immer zuerst geladen.
- Alle `main.*` Dateien werden als Letzes geladen.
- Deine statischen Assets (Schriften, Bilder etc.) gehören in das Verzeichnis `/public`.

Beachte, dass obwohl Meteor diese Regeln hat, du trotzdem nicht zwingend diese vordefinierte Dateistruktur für deine App verwenden musst. Die Struktur die wir vorschlagen ist nur ein möglicher Weg und ist nicht in Stein gemeisselt.

Lies doch auch die [offizielle Meteor Dokumentation](http://docs.meteor.com/#structuringyourapp), wenn du mehr Informationen hierzu möchtest.

<% note do %>

### Ist Meteor MVC?

Wenn zu von anderen Frameworks wie Ruby on Rails benutzt, fragst du dich vielleicht, ob Meteor-Apps das MVC-Pattern (Model View Controller) verwenden.

Die kurze Antwort ist Nein. Im Gegensatz zu Rails zwingt dich Meteor nicht eine vorgegeben Struktur für deine App zu nutzen. In diesem Book strukturieren wir den Code, wie er uns am meisten Sinn macht, ungeachtet etwaiger Akronyme.


<% end %>

### Nicht öffentlich?

Ok, wir haben etwas gelogen. Wir brauchen das `/public` Verzeichnis eigentlichnicht. Dies hat die einfache Begründung, dass Microscope keine statischen Assets benötigt. Aber da die meisten anderen Meteor Apps mindestens einige Bilder einbinden, wollen wir es trotzdem anlegen.

Vielleicht hast du das versteckte Verzeichnis `.meteor` bemerkt. Dort speichert Meteor seinen eigenen Code. Dort Änderungen vorzunehmen ist normalerweise eine schlechte Idee. Grundsätzlich musst du dieses Verzeichnis nicht kennen. Die einzigen Ausnahmen sind die Dateien `.meteor/packages` und `.meteor/release'. Diese können genutzt werden, um die verwendeten Smart Packages aufzulisten und die benutzte Version von Meteor zu spezifizieren. Wenn du Packages hinzufügst oder den Meteor-Version änderst, kann es hilfreich sein, diese Änderungen dieser Dateien zu überprüfen.

<% note do %>

### Unterstriche oder CamelCase

Das einzige das wir zu der uralten Debatte Unterstriche (`my_variable`) vs CamelCase (`myVariable`) sagen, ist, dass es nicht darauf ankommt welches du wählst, solange du dich für eine Variante entscheidest.

In diesem Buch verwenden wir CamelCase, da es üblicherweise so in JavaScript gemacht wird. (Schliesslich heisst es JavaScript und nicht java_script!).

Die einzige Ausnahme zu dieser Regel sind Dateinamen in welchen Unterstriche (`my_file.js`) verwendet werden, sowie CSS Klassen die Bindestriche (`.my-class`) benutzen. Der Grund dafür ist, dass im Dateisystem Unterstriche geläufig sind, während in der CSS Syntax sich Bindestriche durchgesetzt haben (`font-family`, `text-align`, etc.).

<% end %>

### Verwendung von CSS

Dieses Buch behandelt kein CSS. Um dich nicht auch noch mit Design-Details zu belästigen, haben wir uns entschieden das gesamte Stylesheet von Anfang verfügbar zu machen. Damit musst du Dir darüber keine Sorgen machen.

CSS wird automatisch von Meteor geladen und komprimiert. Deshalb muss es im Gegensatz zu den anderen statischen Assets im Verzeichnis `/client` und nicht im Verzeichnis `/public`  abgelegt werden. Erstelle nun das Verzeichnis `client/stylesheets/` und speichere die Datei `styles.css` mit folgendem Inhalt:


~~~css
.grid-block, .main, .post, .comments li, .comment-form {
    background: #fff;
    border-radius: 3px;
    padding: 10px;
    margin-bottom: 10px;
    box-shadow: 0 1px 1px rgba(0, 0, 0, 0.15);
}
body {
    background: #eee;
    color: #666666;
}
.navbar { margin-bottom: 10px }
.navbar .navbar-inner {
    border-radius: 0px 0px 3px 3px;
}
#spinner { height: 300px }
.post {
    *zoom: 1;
    -webkit-transition: all 300ms 0ms;
    -webkit-transition-delay: ease-in;
    -moz-transition: all 300ms 0ms ease-in;
    -o-transition: all 300ms 0ms ease-in;
    transition: all 300ms 0ms ease-in;
    position: relative;
    opacity: 1;
}
.post:before, .post:after {
    content: "";
    display: table;
}
.post:after { clear: both }
.post.invisible { opacity: 0 }
.post .upvote {
    display: block;
    margin: 7px 12px 0 0;
    float: left;
}
.post .post-content { float: left }
.post .post-content h3 {
    margin: 0;
    line-height: 1.4;
    font-size: 18px;
}
.post .post-content h3 a {
    display: inline-block;
    margin-right: 5px;
}
.post .post-content h3 span {
    font-weight: normal;
    font-size: 14px;
    display: inline-block;
    color: #aaaaaa;
}
.post .post-content p { margin: 0 }
.post .discuss {
    display: block;
    float: right;
    margin-top: 7px;
}
.comments {
    list-style-type: none;
    margin: 0;
}
.comments li h4 {
    font-size: 16px;
    margin: 0;
}
.comments li h4 .date {
    font-size: 12px;
    font-weight: normal;
}
.comments li h4 a { font-size: 12px }
.comments li p:last-child { margin-bottom: 0 }
.dropdown-menu span {
    display: block;
    padding: 3px 20px;
    clear: both;
    line-height: 20px;
    color: #bbb;
    white-space: nowrap;
}
.load-more {
    display: block;
    border-radius: 3px;
    background: rgba(0, 0, 0, 0.05);
    text-align: center;
    height: 60px;
    line-height: 60px;
    margin-bottom: 10px;
}
.load-more:hover {
    text-decoration: none;
    background: rgba(0, 0, 0, 0.1);
}
~~~
<%= caption "client/stylesheets/style.css" %>

<%= commit "2-3","modifizierte Datei-Struktur." %>

<% note do %>

### Eine Anmerkung zu CoffeeScript

In diesem Buch verwenden wir pures JavaScript. Solltest du CoffeeScript bevorzugen, ist Meteor auch dazu fähig. Füge einfach das Package CoffeeScript hinzu:

`mrt add coffeescript`

<% end %>
